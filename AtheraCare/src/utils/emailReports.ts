import { DailyActivity, WeeklyStats, getWeeklyActivity, calculateWeeklyStats, getCurrentWeekRange } from './activityTracker';
import { getMedications } from './medications';
import { getTodayHydration } from './hydration';

export interface WeeklyHealthReport {
  userId: string;
  displayName: string;
  weekStart: string;
  weekEnd: string;
  medications: {
    totalTaken: number;
    totalMissed: number;
    completionRate: number;
    averageStreak: number;
  };
  water: {
    totalOz: number;
    averageOz: number;
    averagePercentage: number;
    goalOz: number;
  };
  steps: {
    totalSteps: number;
    averageSteps: number;
    averagePercentage: number;
    goal: number;
  };
  mood: {
    average: number;
    daysTracked: number;
  };
  energy: {
    average: number;
    daysTracked: number;
  };
  achievements: string[];
}

export const generateWeeklyHealthReport = async (
  userId: string,
  displayName: string
): Promise<WeeklyHealthReport | null> => {
  try {
    const weekRange = getCurrentWeekRange();
    const activities = await getWeeklyActivity(userId, weekRange.startDate, weekRange.endDate);
    
    if (activities.length === 0) {
      return null; // No data to report
    }

    const stats = calculateWeeklyStats(activities);
    
    // Generate achievements list
    const achievements: string[] = [];
    
    if (stats.medications.completionRate >= 90) {
      achievements.push('🎯 Excellent medication adherence this week!');
    }
    
    if (stats.water.averagePercentage >= 100) {
      achievements.push('💧 Consistently met water goals!');
    }
    
    if (stats.steps.averagePercentage >= 100) {
      achievements.push('👟 Exceeded daily step goals!');
    }
    
    if (stats.mood.average >= 4) {
      achievements.push('😊 Maintained positive mood throughout the week');
    }
    
    if (stats.energy.average >= 4) {
      achievements.push('⚡ High energy levels maintained');
    }
    
    if (achievements.length === 0) {
      achievements.push('🌟 Great job staying consistent with health tracking!');
    }

    return {
      userId,
      displayName,
      weekStart: weekRange.startDate,
      weekEnd: weekRange.endDate,
      medications: stats.medications,
      water: {
        ...stats.water,
        goalOz: activities[0]?.water.goalOz || 64
      },
      steps: {
        ...stats.steps,
        goal: activities[0]?.steps.goal || 10000
      },
      mood: stats.mood,
      energy: stats.energy,
      achievements
    };
  } catch (error) {
    console.error('Error generating weekly health report:', error);
    return null;
  }
};

export const formatWeeklyReportEmail = (report: WeeklyHealthReport): string => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const formatPercentage = (value: number) => `${Math.round(value)}%`;
  const formatNumber = (value: number) => value.toLocaleString();

  return `
📊 Weekly Health Report for ${report.displayName}

📅 Week of ${formatDate(report.weekStart)} - ${formatDate(report.weekEnd)}

💊 MEDICATION ADHERENCE
• Completion Rate: ${formatPercentage(report.medications.completionRate)}
• Medications Taken: ${report.medications.totalTaken}
• Medications Missed: ${report.medications.totalMissed}
• Average Streak: ${Math.round(report.medications.averageStreak)} days

💧 HYDRATION PROGRESS
• Average Daily Intake: ${Math.round(report.water.averageOz)} oz
• Goal Achievement: ${formatPercentage(report.water.averagePercentage)}
• Total Weekly Intake: ${formatNumber(report.water.totalOz)} oz
• Daily Goal: ${report.water.goalOz} oz

👟 ACTIVITY & STEPS
• Average Daily Steps: ${formatNumber(Math.round(report.steps.averageSteps))}
• Goal Achievement: ${formatPercentage(report.steps.averagePercentage)}
• Total Weekly Steps: ${formatNumber(report.steps.totalSteps)}
• Daily Goal: ${formatNumber(report.steps.goal)} steps

😊 MOOD & ENERGY
• Average Mood: ${report.mood.average > 0 ? `${report.mood.average.toFixed(1)}/5` : 'Not tracked'}
• Average Energy: ${report.energy.average > 0 ? `${report.energy.average.toFixed(1)}/5` : 'Not tracked'}
• Days Tracked: ${report.mood.daysTracked} days

🏆 THIS WEEK'S ACHIEVEMENTS
${report.achievements.map(achievement => `• ${achievement}`).join('\n')}

---
This report was automatically generated by AtheraCare.
Your health data is private and secure.
  `.trim();
};

export const sendWeeklyHealthReport = async (
  familyEmail: string,
  report: WeeklyHealthReport
): Promise<boolean> => {
  try {
    // For now, we'll use a simple email service
    // In a production app, you'd integrate with a service like SendGrid, Mailgun, or AWS SES
    
    const emailContent = formatWeeklyReportEmail(report);
    const subject = `📊 Weekly Health Report - ${report.displayName}`;
    
    // For development/testing, we'll log the email content
    console.log('=== WEEKLY HEALTH REPORT EMAIL ===');
    console.log('To:', familyEmail);
    console.log('Subject:', subject);
    console.log('Content:', emailContent);
    console.log('==================================');
    
    // TODO: Integrate with actual email service
    // Example with a hypothetical email service:
    // await emailService.send({
    //   to: familyEmail,
    //   subject: subject,
    //   html: emailContent.replace(/\n/g, '<br>'),
    //   from: 'noreply@atheracare.com'
    // });
    
    // For now, return true to simulate successful sending
    return true;
  } catch (error) {
    console.error('Error sending weekly health report:', error);
    return false;
  }
};

export const scheduleWeeklyReport = async (
  userId: string,
  displayName: string,
  familyEmail: string
): Promise<void> => {
  try {
    // Generate the report
    const report = await generateWeeklyHealthReport(userId, displayName);
    
    if (report) {
      // Send the report
      const success = await sendWeeklyHealthReport(familyEmail, report);
      
      if (success) {
        console.log('Weekly health report sent successfully to:', familyEmail);
      } else {
        console.error('Failed to send weekly health report to:', familyEmail);
      }
    } else {
      console.log('No health data available for weekly report');
    }
  } catch (error) {
    console.error('Error in weekly report scheduling:', error);
  }
};
